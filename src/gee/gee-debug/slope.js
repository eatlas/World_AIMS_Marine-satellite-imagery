// This code investigates when the terrain slope calculation fails and
// why. 
// Conclusion:
// It works on individual images, but not composite images. This is because
// the creation of composite images (using a reducer), changes the projection
// from the original area specific UTM projection with units of metres to a
// more generic projection WGS84 with units of degrees. This happens because
// composites are potentially made up from images of multiple projections
// particularly if the composite is over a large area. Thus a regionally
// specific projection (such as a UTM slice) could not be used for the resulting
// whole image. 
// The slope calculation assumes its input is a Digital Elevation Model with
// a projection with units of metres (although the projection requirement is
// not really documented well). If you give it an image in WGS 84 projection
// it simply returns an empty masked image.
//
// In our case we are dealing with processing individual Sentinel 2 tiles
// and so we can be guaranteed that there does exist a single suitable UTM
// projection. As a result we can reproject the composite image generated by
// the reduction process from WGS84 back to the original image's UTM projection.
// The slope calculation will then work.
//
// A slight complication to this process is that the reprojection process needs
// to be performed at a specific resolution. Unfortunately GEE in an interactive
// setting it only has enough memory (80 MB) to process an image with a resolution
// of about 3000 x 3000 pixels and so for a Sentinel 2 scene the highest resolution
// the reprojection can be done is at 30 m.
//
// This is OK for our purposes because we don't need the native 10 m resolution 
// for the final slope images anyway.
//
// Second issue: After reprojection of the composite to UTM projection the
// image looks find in the interactive portal, but exporting to Google Drive
// the final image is upside down. QGIS can interpret the image correctly
// but GDAL can't handle the flipped y-axis.
// The image export projection is EPSG:3857 (WGS 84/Mercator), which can be
// used for the slope calculation. The mercator projection will cause 
// significant distortion near the poles, luckily reefs are near the
// equator.

// -----------------------
// Reproducing the problem
// -----------------------

// Here we have chosen three images from the same Sentinel 2 tile.
// These images do not however cover the full extent of the tile area.
// Thus the resulting composite image will have a geometry that is
// different to each of the images.
// Using this slightly complex set of examples highlights a case where
// we can only get a full tile images by creating a composite of the
// multiple images.
var images = [
    ee.Image("COPERNICUS/S2/20180811T001111_20180811T001108_T56KKF"), // Right image
    ee.Image("COPERNICUS/S2/20180829T002049_20180829T002045_T56KKF"), // Left image
    ee.Image("COPERNICUS/S2/20170809T002111_20170809T002107_T56KKF")  // Left image
  ];

var composite_collection = ee.ImageCollection(images);

// When I attempted to print the projection of the whole image GEE warns
// that not all the layers in the image contain the same projection and
// that a select was needed. I reviewed the projection of the layers by
// printing out the image and found that all layers were the same projection
// an so I assume that the error response from GEE is wrong.
print("Projection of images");
print(images[0].select('B1').projection());   // EPSG:32756
print(images[1].select('B1').projection());   // EPSG:32756
print(images[2].select('B1').projection());   // EPSG:32756

// Combine the images. This is where the projection is changed.
// For simplicity GEE switches to using WGS 84 in case the input
// images are different projections. It doesn't bother to try and
// retain the original projection.
var composite = composite_collection.reduce(ee.Reducer.mean());

print("Projection of composite");
print(composite.select('B1_mean').projection());   // EPSG:4326 (WGS 84)

// Restore the geometry of the composite (see 02-debug-reducer-geometry.js)
var compositeClipped = composite.clip(composite_collection.geometry().dissolve());

// Slope calculation doesn't work on when the projection is EPSG:4326
// This produced an image that is all masked (i.e. blank).
var slopeComposite = ee.Terrain.slope(compositeClipped.select('B1_mean'));

// Perform the slope calculation on a single image.
// Works fine, however the scale of the slope calculations depends on the
// zoom level in the map view. When zoomed fully in the slope pixels are
// approximately 60 m x 60 m. It is unclear whether this is part of the
// slope algorithm (i.e. estimated slope fit over 6 pixels) or just a 
// quirk. I suspect this is part of limiting the memory requirements in
// the reprojection.
var slopeImage = ee.Terrain.slope(images[0].select('B1'));

Map.setCenter(150.6, -17.5, 9);

Map.addLayer(images[0], 
  {bands: ['B4','B3','B2'], min: 0, max: 1500}, 
  'Sentinel 2 - images[0]');
  
Map.addLayer(compositeClipped, 
  {bands: ['B4_mean','B3_mean','B2_mean'], min: 0, max: 1500}, 
  'Sentinel 2 - composite');

// Problem: The image is all masked and blank
Map.addLayer(slopeComposite, 
  {min: 0, max: 1}, 
  'Sentinel 2 - Slope Composite');

  
Map.addLayer(slopeImage, 
  {min: 0, max: 10}, 
  'Sentinel 2 - Slope images[0]');

// ------------------------------
// Let's try and fix the problem
// ------------------------------

// The problem with a composite image is that the source images
// may be all in different native projections. With Sentinel 2
// imagery the source images are in various WGS 84 / UTM zone XX
// projections such as EPSG:32756. The UTM projections have a unit of metres
// and are in lots small vertical strips around the globe. There is
// no global UTM projection in metres and so we can't arbitrarily combine
// images around the globe and retain their original project. As a result
// GEE by default reprojects them to EPSG:4326 (with units of degrees).
// The slope calculation is not valid for degrees, and so GEE generates
// a blank image.
// To fix the problem we need to reproject the image composite back
// to a UTM projection, matching that of the source imagery. This 
// only works robustly if we are processing only images from a single
// Sentinel 2 tile, as this guarantees that we are not combining 
// images of different projections.

// Get the project of the Sentinel 2 tile. Here we assume all our
// images are from the same Sentinel 2 tile.
var projection = images[0].select('B1').projection();

// The reprojection needs to be performed at a specific resolution (scale)
// If unspecified it seems to default to something around 20 - 40m.
// Setting the scale to 10 results in a native resolution reprojection that
// causes multiples errors, one per band: 
// Tile error: Output of image computation is too large 
// (1 bands for 38799761 pixels = 296.0 MiB > 80.0 MiB).
// If this is a reduction, try specifying a larger 'tileScale' parameter.
//
// Strangely the number of pixels in each error message is different.
// This also implies that limiting the number of bands using a select
// would limit the amount of calculations. This however does not seem to 
// make a difference with the reprojection failing with multiple errors
// even when selecting a single band.
//
// Luckily we don't need the slope calculations to be performed at
// the native resolution.
// The finest scale that fits in the memory allocation to web interactive 
// calculations is 30 m. This could possibly be lowered for export
// (as GEE provides more memory), however the slope gradients are scale
// dependent and so adjustments would need to be made to keep the results
// consistent between export and interactive.
var projectedComposite = compositeClipped.select('B1_mean').reproject(projection, null, 30);

var slopeProjectedComposite = ee.Terrain.slope(projectedComposite.select('B1_mean'));

// This slope image displays correctly.
Map.addLayer(slopeProjectedComposite, 
  {min: 0, max: 10}, 
  'Sentinel 2 - Slope reprojected composite');